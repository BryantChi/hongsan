{
    "sourceFile": "app/Http/Controllers/Admin/ProductsInfoController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1753263954777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753265085856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -359,8 +359,11 @@\n \n         // 處理產品類別關聯\n         if (!empty($prod_categories_id)) {\n             $productsInfo->productCategories()->sync($prod_categories_id);\n+        } else {\n+            // 如果沒有提供產品類別，則清除所有關聯\n+            $productsInfo->productCategories()->detach();\n         }\n \n         // 處理多語系翻譯\n         foreach ($translationData as $locale => $data) {\n"
                },
                {
                    "date": 1753265108188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -292,8 +292,12 @@\n     public function edit($id)\n     {\n         $productsInfo = $this->productsInfoRepository->find($id);\n \n+        // 確保載入產品類別關聯\n+        $productsInfo->load('productCategories');\n+\n+\n         if (empty($productsInfo)) {\n             Flash::error('找不到產品資訊');\n \n             return redirect(route('admin.productsInfos.index'));\n"
                },
                {
                    "date": 1753265306058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n         //     $length = 1000; // 設置一個較大的數值，避免無限制查詢\n         // }\n         $search = $request->get('search')['value'] ?? '';\n \n-        $query = ProductsInfo::with(['translations', 'applicationCategory', 'brand', 'productCategory']);\n+        $query = ProductsInfo::with(['translations', 'applicationCategory', 'brand', 'productCategories']);\n \n         // 加入搜尋條件\n         if (!empty($search)) {\n             $query->whereHas('translations', function($q) use ($search) {\n"
                },
                {
                    "date": 1753265377953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,630 @@\n+<?php\n+\n+namespace App\\Http\\Controllers\\Admin;\n+\n+use App\\Http\\Requests\\Admin\\CreateProductsInfoRequest;\n+use App\\Http\\Requests\\Admin\\UpdateProductsInfoRequest;\n+use App\\Http\\Controllers\\AppBaseController;\n+use App\\Repositories\\Admin\\ProductsInfoRepository;\n+use Illuminate\\Http\\Request;\n+use App\\Models\\Admin\\ProductImage;\n+use App\\Models\\Admin\\ProductsInfo;\n+use Flash;\n+use Illuminate\\Support\\Facades\\Storage;\n+// 加入這行來引入 Form 類別\n+use Collective\\Html\\FormFacade as Form;\n+use Intervention\\Image\\Facades\\Image;\n+use Illuminate\\Support\\Facades\\File;\n+use Illuminate\\Support\\Str;\n+\n+class ProductsInfoController extends AppBaseController\n+{\n+    /** @var ProductsInfoRepository $productsInfoRepository*/\n+    private $productsInfoRepository;\n+\n+    // 設定每個產品的最大圖片數量\n+    private const MAX_IMAGES_PER_PRODUCT = 10;\n+\n+    public function __construct(ProductsInfoRepository $productsInfoRepo)\n+    {\n+        $this->productsInfoRepository = $productsInfoRepo;\n+    }\n+\n+    public function getDataTableData(Request $request)\n+    {\n+        try {\n+        // $productsInfos = $this->productsInfoRepository->all()\n+        //     ->load([\n+        //         'translations',\n+        //         'applicationCategory',  // 需添加此關聯到 ProductsInfo 模型\n+        //         'brand',                // 需添加此關聯到 ProductsInfo 模型\n+        //         'productCategory'       // 需添加此關聯到 ProductsInfo 模型\n+        //     ]);\n+        // $draw = $request->get('draw');\n+        // $start = $request->get('start', 0);\n+        // // 最關鍵的修改：確保 length 永遠有值\n+        // $length = $request->get('length', 10);\n+\n+        // // 如果 length 為 -1，表示要取得所有資料\n+        // if ($length == -1) {\n+        //     $length = 1000; // 設置一個較大的數值，避免無限制查詢\n+        // }\n+        $search = $request->get('search')['value'] ?? '';\n+\n+        $query = ProductsInfo::with(['translations', 'applicationCategory', 'brand', 'productCategories']);\n+\n+        // 加入搜尋條件\n+        if (!empty($search)) {\n+            $query->whereHas('translations', function($q) use ($search) {\n+                $q->where('name', 'like', \"%{$search}%\");\n+\n+            });\n+        }\n+\n+        // $recordsTotal = $query->count();\n+        // $recordsFiltered = $recordsTotal;\n+\n+        // 只取得需要的分頁資料\n+        // $products = $query->skip($start)->take($length)->get();\n+        $products = $query->get();\n+\n+        $data = [];\n+        foreach ($products as $product) {\n+            // 產品封面圖片,Html\n+            $coverImage = $product->prod_img_cover;\n+            $coverImageHtml = '';\n+            if ($coverImage) {\n+                $coverImageHtml = '<img src=\"' . asset('uploads/' . $coverImage) . '\" class=\"img-fluid\" alt=\"產品封面圖片\">';\n+            } else {\n+                $coverImageHtml = '<p class=\"text-muted\">無封面圖片</p>';\n+            }\n+\n+\n+            // 產品名稱處理\n+            $nameHtml = '';\n+            $translationsCount = count($product->translations);\n+            foreach ($product->translations as $index => $translation) {\n+                $isLast = ($index === $translationsCount - 1);\n+                $langName = strtoupper($translation->locale) === 'ZH_TW' ? '中文' : 'English';\n+                $nameHtml .= '<div class=\"d-flex flex-lg-row flex-column justify-content-start align-items-start mb-1 pb-2 ' .\n+                            ($isLast ? 'border-bottom-0' : 'border-bottom') . '\">' .\n+                            '<span class=\"col-md-6 mr-2 font-weight-bold\">' . $langName . ':</span>' .\n+                            '<span class=\"col text-start text-wrap\">' . $translation->name . '</span></div>';\n+            }\n+\n+            // 應用類別名稱\n+            $applicationCategoriesInfo = $product->applicationCategory ? $product->applicationCategory->name : '無';\n+            if ($product->application_categories_info_id == 1) {\n+                $applicationCategoriesInfo .= ' - ' .\n+                    ($product->purchase_lease == 'purchase' ? '購買' :\n+                    ($product->purchase_lease == 'lease' ? '租賃' : '無'));\n+            }\n+\n+            // 品牌名稱\n+            $brands = $product->brand ? $product->brand->name : '無';\n+\n+            // 產品類別名稱\n+            $productCategoriesInfo = '無';\n+            if ($product->productCategories && $product->productCategories->count() > 0) {\n+                $categoryNames = $product->productCategories->pluck('name')->toArray();\n+                $productCategoriesInfo = implode('<br>', $categoryNames);\n+            }\n+\n+            // 配管與膠塊處理\n+            $pipingHtml = '';\n+            $glueBlockHtml = '';\n+            $translationsCount = count($product->translations);\n+            foreach ($product->translations as $index => $translation) {\n+                $isLast = ($index === $translationsCount - 1);\n+                $langName = strtoupper($translation->locale) === 'ZH_TW' ? '中文' : 'English';\n+\n+                $pipingHtml .= '<div class=\"d-flex flex-lg-row flex-column justify-content-start align-items-start mb-1 pb-2 ' .\n+                            ($isLast ? 'border-bottom-0' : 'border-bottom') . '\">' .\n+                            '<span class=\"col-md-6 mr-2 font-weight-bold\">' . $langName . ':</span>' .\n+                            '<span class=\"col text-start text-wrap\">' . $translation->piping . '</span></div>';\n+\n+                $glueBlockHtml .= '<div class=\"d-flex flex-lg-row flex-column justify-content-start align-items-start mb-1 pb-2 ' .\n+                            ($isLast ? 'border-bottom-0' : 'border-bottom') . '\">' .\n+                            '<span class=\"col-md-6 mr-2 font-weight-bold\">' . $langName . ':</span>' .\n+                            '<span class=\"col text-start text-wrap\">' . $translation->glue_block . '</span></div>';\n+            }\n+\n+            // 操作按鈕\n+            $actions = Form::open(['route' => ['admin.productsInfos.destroy', $product->id], 'method' => 'delete']) .\n+                    '<div class=\"btn-group\">' .\n+                    '<a href=\"' . localized_route('admin.productsInfos.edit', [$product->id]) . '\"' .\n+                    'class=\"btn btn-default btn-md\"><i class=\"far fa-edit\"></i></a>' .\n+                    Form::button('<i class=\"far fa-trash-alt\"></i>', ['type' => 'button', 'class' => 'btn btn-danger btn-md', 'onclick' => \"return check(this)\"]) .\n+                    '</div>' .\n+                    Form::close();\n+            // $actions = '<form action=\"' . route('admin.productsInfos.destroy', $product->id) . '\" method=\"POST\">' .\n+            // csrf_field() .\n+            // method_field('DELETE') .\n+            // '<div class=\"btn-group\">' .\n+            // '<a href=\"' . route('admin.productsInfos.edit', [$product->id]) . '\" ' .\n+            // 'class=\"btn btn-default btn-md\"><i class=\"far fa-edit\"></i></a>' .\n+            // '<button type=\"submit\" class=\"btn btn-danger btn-md\" onclick=\"return confirm(\\'確定要刪除此產品嗎?\\')\"><i class=\"far fa-trash-alt\"></i></button>' .\n+            // '</div>' .\n+            // '</form>';\n+\n+            $data[] = [\n+                'id' => $product->id,\n+                'prod_img_cover' => $coverImageHtml,\n+                'name' => $nameHtml,\n+                'application_category' => $applicationCategoriesInfo,\n+                'brand' => $brands,\n+                'product_category' => $productCategoriesInfo,\n+                'version' => $product->version,\n+                'quick_bucket_changer' => $product->quick_bucket_changer ?\n+                    '<i class=\"fas fa-check text-success\"></i>' : '<i class=\"fas fa-times text-danger\"></i>',\n+                'operating_converter' => $product->operating_converter ?\n+                    '<i class=\"fas fa-check text-success\"></i>' : '<i class=\"fas fa-times text-danger\"></i>',\n+                'piping' => $pipingHtml,\n+                'glue_block' => $glueBlockHtml,\n+                'actions' => $actions\n+            ];\n+        }\n+\n+        return response()->json(['data' => $data]);\n+        // return response()->json([\n+        //     'draw' => intval($draw),\n+        //     'recordsTotal' => intval($recordsTotal),\n+        //     'recordsFiltered' => intval($recordsFiltered),\n+        //     'data' => $data\n+        // ]);\n+\n+        } catch (\\Exception $e) {\n+        \\Log::error('DataTable error: ' . $e->getMessage() . ' at ' . $e->getFile() . ':' . $e->getLine());\n+        return response()->json(['error' => $e->getMessage()], 500);\n+    }\n+    }\n+\n+    /**\n+     * Display a listing of the ProductsInfo.\n+     */\n+    public function index(Request $request)\n+    {\n+        // $productsInfos = $this->productsInfoRepository->all();\n+        $productsInfos = collect([]);\n+\n+        return view('admin.products_infos.index')\n+            ->with('productsInfos', $productsInfos);\n+    }\n+\n+    /**\n+     * Show the form for creating a new ProductsInfo.\n+     */\n+    public function create()\n+    {\n+        // 取得系統支援的語系\n+        $locales = config('translatable.locales');\n+        // 取得應用類別資訊列表\n+        $applicationCategoriesInfos = \\App\\Models\\Admin\\ApplicationCategoriesInfo::pluck('name', 'id')->toArray();\n+        // 將應用類別資訊轉換為選擇列表格式\n+        $applicationCategoriesInfos = ['' => '請選擇'] + $applicationCategoriesInfos;\n+\n+        return view('admin.products_infos.create', compact('locales', 'applicationCategoriesInfos'));\n+    }\n+\n+    /**\n+     * Store a newly created ProductsInfo in storage.\n+     */\n+    public function store(CreateProductsInfoRequest $request)\n+    {\n+        $input = $request->all();\n+\n+        // 自動生成 slug (如果沒有提供)\n+        // if (empty($input['slug']) && isset($input[config('translatable.fallback_locale')]['name'])) {\n+        //     $input['slug'] = \\Illuminate\\Support\\Str::slug($input[config('translatable.fallback_locale')]['name']);\n+        // }\n+\n+        // 處理圖片上傳\n+        $input['prod_img_cover'] = $this->processImage($request->file('prod_img_cover'), 'product_cover_image');\n+\n+        // 處理檔案上傳\n+        $input['pdf'] = $this->handleFileUpload($request->file('pdf'), '', 'catalog_files');\n+        // 如果沒有上傳檔案，則設置為空字串\n+        if (!$input['pdf']) {\n+            $input['pdf'] = '';\n+        }\n+\n+        // 處理多語系資料\n+        $translationData = [];\n+        $locales = config('translatable.locales');\n+\n+        foreach ($locales as $locale) {\n+            if (isset($input[$locale])) {\n+                $translationData[$locale] = $input[$locale];\n+                unset($input[$locale]); // 移除以免影響主表資料\n+            }\n+        }\n+\n+        $prod_categories_id = $input['product_categories_id'] ?? [];\n+        unset($input['product_categories_id']); // 移除以免影響主表資料\n+\n+        $productsInfo = $this->productsInfoRepository->create($input);\n+\n+        // 處理產品類別關聯\n+        if (!empty($prod_categories_id)) {\n+            $productsInfo->productCategories()->sync($prod_categories_id);\n+        }\n+\n+        // 處理多語系翻譯\n+        foreach ($translationData as $locale => $data) {\n+            $productsInfo->translateOrNew($locale)->fill($data);\n+        }\n+        $productsInfo->save();\n+\n+        // 處理產品圖片上傳\n+        if ($request->hasFile('product_images')) {\n+            // 檢查圖片數量\n+            $uploadCount = count($request->file('product_images'));\n+\n+            // 如果超過最大數量，顯示錯誤\n+            if ($uploadCount > self::MAX_IMAGES_PER_PRODUCT) {\n+                Flash::error('每個產品最多只能有 '.self::MAX_IMAGES_PER_PRODUCT.' 張圖片');\n+                return redirect()->back()->withInput();\n+            }\n+\n+            $this->saveProductImages($productsInfo, $request);\n+        }\n+\n+        Flash::success('產品建立成功');\n+\n+        return redirect(route('admin.productsInfos.index'));\n+    }\n+\n+    /**\n+     * Display the specified ProductsInfo.\n+     */\n+    public function show($id)\n+    {\n+        $productsInfo = $this->productsInfoRepository->find($id);\n+\n+        if (empty($productsInfo)) {\n+            Flash::error('找不到產品資訊');\n+\n+            return redirect(route('admin.productsInfos.index'));\n+        }\n+\n+        return view('admin.products_infos.show')->with('productsInfo', $productsInfo);\n+    }\n+\n+    /**\n+     * Show the form for editing the specified ProductsInfo.\n+     */\n+    public function edit($id)\n+    {\n+        $productsInfo = $this->productsInfoRepository->find($id);\n+\n+        // 確保載入產品類別關聯\n+        $productsInfo->load('productCategories');\n+\n+\n+        if (empty($productsInfo)) {\n+            Flash::error('找不到產品資訊');\n+\n+            return redirect(route('admin.productsInfos.index'));\n+        }\n+\n+        // 取得系統支援的語系\n+        $locales = config('translatable.locales');\n+        // 取得應用類別資訊列表\n+        $applicationCategoriesInfos = \\App\\Models\\Admin\\ApplicationCategoriesInfo::pluck('name', 'id')->toArray();\n+        // 將應用類別資訊轉換為選擇列表格式\n+        $applicationCategoriesInfos = ['' => '請選擇'] + $applicationCategoriesInfos;\n+\n+        // 傳遞資料到編輯視圖\n+        return view('admin.products_infos.edit', compact('productsInfo', 'locales', 'applicationCategoriesInfos'));\n+\n+    }\n+\n+    /**\n+     * Update the specified ProductsInfo in storage.\n+     */\n+    public function update($id, UpdateProductsInfoRequest $request)\n+    {\n+        $productsInfo = $this->productsInfoRepository->find($id);\n+\n+        if (empty($productsInfo)) {\n+            Flash::error('Products Info not found');\n+\n+            return redirect(route('admin.productsInfos.index'));\n+        }\n+\n+        $input = $request->all();\n+\n+        // 自動生成 slug (如果沒有提供)\n+        // if (empty($input['slug']) && isset($input[config('translatable.fallback_locale')]['name'])) {\n+        //     $input['slug'] = \\Illuminate\\Support\\Str::slug($input[config('translatable.fallback_locale')]['name']);\n+        // }\n+\n+        // 處理圖片上傳\n+       $input['prod_img_cover'] = $this->handleImageUpload($request->file('prod_img_cover'), $productsInfo->prod_img_cover, 'product_cover_image');\n+\n+        // 處理檔案上傳\n+        if ($request->hasFile('pdf')) {\n+            $input['pdf'] = $this->handleFileUpload($request->file('pdf'), $productsInfo->pdf, 'catalog_files');\n+        } else {\n+            // 如果沒有上傳檔案，則保留原有的 PDF 路徑\n+            $input['pdf'] = $productsInfo->pdf;\n+        }\n+\n+        // 處理多語系資料\n+        $translationData = [];\n+        $locales = config('translatable.locales');\n+        foreach ($locales as $locale) {\n+            if (isset($input[$locale])) {\n+                $translationData[$locale] = $input[$locale];\n+                unset($input[$locale]); // 移除以免影響主表資料\n+            }\n+        }\n+\n+        $prod_categories_id = $input['product_categories_id'] ?? [];\n+        unset($input['product_categories_id']); // 移除以免影響主表資料\n+\n+        $productsInfo = $this->productsInfoRepository->update($input, $id);\n+\n+        // 處理產品類別關聯\n+        if (!empty($prod_categories_id)) {\n+            $productsInfo->productCategories()->sync($prod_categories_id);\n+        } else {\n+            // 如果沒有提供產品類別，則清除所有關聯\n+            $productsInfo->productCategories()->detach();\n+        }\n+\n+        // 處理多語系翻譯\n+        foreach ($translationData as $locale => $data) {\n+            $productsInfo->translateOrNew($locale)->fill($data);\n+        }\n+        $productsInfo->save();\n+\n+        // 計算更新後的圖片數量\n+        $existingImageCount = $productsInfo->images->count();\n+        $deleteCount = $request->has('delete_images') ? count($request->delete_images) : 0;\n+        $uploadCount = $request->hasFile('product_images') ? count($request->file('product_images')) : 0;\n+\n+        // 計算最終圖片數量\n+        $finalImageCount = $existingImageCount - $deleteCount + $uploadCount;\n+\n+        // 檢查是否超過限制\n+        if ($finalImageCount > self::MAX_IMAGES_PER_PRODUCT) {\n+            Flash::error('每個產品最多只能有 '.self::MAX_IMAGES_PER_PRODUCT.' 張圖片');\n+            return redirect()->back()->withInput();\n+        }\n+\n+        // 處理圖片刪除\n+        if ($request->has('delete_images')) {\n+            $this->deleteProductImages($request->delete_images);\n+        }\n+\n+        // 處理圖片排序\n+        if ($request->has('sort_orders')) {\n+            $this->updateImageSortOrders($request->sort_orders);\n+        }\n+\n+        // 處理新上傳的圖片\n+        if ($request->hasFile('product_images')) {\n+            $this->saveProductImages($productsInfo, $request);\n+        }\n+\n+        Flash::success('產品更新成功');\n+\n+        return redirect(route('admin.productsInfos.index'));\n+    }\n+\n+    /**\n+     * Remove the specified ProductsInfo from storage.\n+     *\n+     * @throws \\Exception\n+     */\n+    public function destroy($id)\n+    {\n+        $productsInfo = $this->productsInfoRepository->find($id);\n+\n+        if (empty($productsInfo)) {\n+            Flash::error('Products Info not found');\n+\n+            return redirect(route('admin.productsInfos.index'));\n+        }\n+\n+        // 刪除產品關聯的所有圖片\n+        foreach ($productsInfo->images as $image) {\n+            Storage::disk('public')->delete($image->image_path);\n+            $image->delete();\n+        }\n+\n+        $this->productsInfoRepository->delete($id);\n+\n+        Flash::success('產品刪除成功');\n+\n+        return redirect(route('admin.productsInfos.index'));\n+    }\n+\n+    /**\n+     * 儲存產品圖片\n+     */\n+    private function saveProductImages($product, $request)\n+    {\n+        $files = $request->file('product_images');\n+        $newSortOrders = $request->new_sort_orders ?? [];\n+        $maxSortOrder = ProductImage::where('product_id', $product->id)->max('sort_order') ?? 0;\n+\n+        foreach ($files as $key => $file) {\n+            // 存儲圖片到儲存空間\n+            $path = $file->store('product_images', 'public');\n+\n+            // 儲存圖片記錄到資料庫\n+            $sortOrder = isset($newSortOrders[$key]) ? $newSortOrders[$key] : $maxSortOrder + 1;\n+            $maxSortOrder = max($maxSortOrder, $sortOrder);\n+\n+            ProductImage::create([\n+                'product_id' => $product->id,\n+                'image_path' => $path,\n+                'sort_order' => $sortOrder\n+            ]);\n+        }\n+    }\n+\n+    /**\n+     * 刪除產品圖片\n+     */\n+    private function deleteProductImages($imageIds)\n+    {\n+        foreach ($imageIds as $imageId) {\n+            $image = ProductImage::find($imageId);\n+\n+            if ($image) {\n+                // 刪除實際圖片檔案\n+                Storage::disk('public')->delete($image->image_path);\n+\n+                // 刪除資料庫記錄\n+                $image->delete();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * 更新圖片排序（根據拖曳排序的結果）\n+     */\n+    private function updateImageSortOrders($sortOrders)\n+    {\n+        foreach ($sortOrders as $imageId => $sortOrder) {\n+            ProductImage::where('id', $imageId)\n+                ->update(['sort_order' => $sortOrder]);\n+        }\n+    }\n+\n+    // 共用檔案處理函式\n+    function handleFileUpload($newFile, $existingFilePath, $uploadDir)\n+    {\n+        if ($newFile) {\n+            $path = public_path('uploads/files/' . $uploadDir . '/');\n+            $filename = time() . '_' . $newFile->getClientOriginalName();\n+\n+            // 確保目錄存在\n+            if (!file_exists($path)) {\n+                mkdir($path, 0755, true);\n+            }\n+\n+            // 若已有檔案，刪除舊檔案\n+            if (!empty($existingFilePath) && File::exists(public_path('uploads/' . $existingFilePath))) {\n+                File::delete(public_path('uploads/' . $existingFilePath));\n+            }\n+\n+            // 儲存新檔案\n+            $newFile->move($path, $filename);\n+\n+            return 'files/' . $uploadDir . '/' . $filename;\n+        }\n+\n+        // 若無新檔案，返回舊檔案路徑\n+        return $existingFilePath;\n+    }\n+\n+    // 共用的圖片處理函式\n+    function processImage($image, $uploadDir, $resizeWidth = 800, $quality = 75)\n+    {\n+        if ($image) {\n+            $path = public_path('uploads/images/' . $uploadDir) . '/';\n+            $filename = time() . '_' . $image->getClientOriginalName();\n+\n+            if (!file_exists($path)) {\n+                mkdir($path, 0755, true);\n+            }\n+\n+            // 壓縮圖片\n+            $image = Image::make($image)\n+                ->orientate()\n+                // ->resize($resizeWidth, null, function ($constraint) {\n+                //     $constraint->aspectRatio();\n+                //     $constraint->upsize();\n+                // })\n+                ->encode('jpg', $quality); // 設定 JPG 格式和品質\n+            $image->save($path . $filename);\n+\n+            return 'images/' . $uploadDir . '/' . $filename;\n+        }\n+\n+        return '';\n+    }\n+\n+    // 共用圖片處理函式\n+    function handleImageUpload($newImage, $existingImagePath, $uploadDir, $resizeWidth = 800, $quality = 75)\n+    {\n+        if ($newImage) {\n+            $path = public_path('uploads/images/' . $uploadDir . '/');\n+            $filename = time() . '_' . $newImage->getClientOriginalName();\n+\n+            // 確保目錄存在\n+            if (!file_exists($path)) {\n+                mkdir($path, 0755, true);\n+            }\n+\n+            // 若已有圖片，刪除舊圖片\n+            if (!empty($existingImagePath) && File::exists(public_path('uploads/' . $existingImagePath))) {\n+                File::delete(public_path('uploads/' . $existingImagePath));\n+            }\n+\n+            // 壓縮並保存新圖片\n+            $image = Image::make($newImage)\n+                ->orientate()\n+                // ->resize($resizeWidth, null, function ($constraint) {\n+                //     $constraint->aspectRatio();\n+                //     $constraint->upsize();\n+                // })\n+                ->encode('jpg', $quality); // 設定 JPG 格式和品質\n+            $image->save($path . $filename);\n+\n+            return 'images/' . $uploadDir . '/' . $filename;\n+        }\n+\n+        // 若無新圖片，返回舊圖片路徑\n+        return $existingImagePath;\n+    }\n+\n+    /**\n+     * 根據應用類別獲取對應的產品品牌和產品類別\n+     */\n+    public function getCategoriesData(Request $request)\n+    {\n+        $applicationCategoryId = $request->input('application_category_id');\n+        // 取得語系\n+        $locale = app()->getLocale();\n+\n+        // 獲取對應的品牌列表，包含翻譯\n+        $brands = \\App\\Models\\Admin\\BrandsInfo::with(['translations' => function($query) use ($locale) {\n+                $query->where('locale', $locale);\n+            }])\n+            ->where('application_categories_info_id', $applicationCategoryId)\n+            ->get()\n+            ->map(function($brand) {\n+                return [\n+                    'id' => $brand->id,\n+                    'name' => $brand->translate()->name ?? $brand->id // 如果翻譯不存在則使用ID\n+                ];\n+            })\n+            ->pluck('name', 'id')\n+            ->toArray();\n+\n+        // 獲取對應的產品類別列表，包含翻譯\n+        $productCategories = \\App\\Models\\Admin\\ProductCategories::with(['translations' => function($query) use ($locale) {\n+                $query->where('locale', $locale);\n+            }])\n+            ->where('application_categories_info_id', $applicationCategoryId)\n+            ->get()\n+            ->map(function($category) {\n+                return [\n+                    'id' => $category->id,\n+                    'name' => $category->translate()->name ?? $category->id // 如果翻譯不存在則使用ID\n+                ];\n+            })\n+            ->pluck('name', 'id')\n+            ->toArray();\n+\n+        return response()->json([\n+            'brands' => $brands,\n+            'productCategories' => $productCategories\n+        ]);\n+    }\n+}\n"
                },
                {
                    "date": 1753268894417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,8 +106,9 @@\n             // 產品類別名稱\n             $productCategoriesInfo = '無';\n             if ($product->productCategories && $product->productCategories->count() > 0) {\n                 $categoryNames = $product->productCategories->pluck('name')->toArray();\n+                // 使用 implode 來處理多個類別名稱，並用 <br> 分隔，span class=\"badge badge-primary\" 標籤包住\n                 $productCategoriesInfo = implode('<br>', $categoryNames);\n             }\n \n             // 配管與膠塊處理\n"
                },
                {
                    "date": 1753268927045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,13 @@\n             $productCategoriesInfo = '無';\n             if ($product->productCategories && $product->productCategories->count() > 0) {\n                 $categoryNames = $product->productCategories->pluck('name')->toArray();\n                 // 使用 implode 來處理多個類別名稱，並用 <br> 分隔，span class=\"badge badge-primary\" 標籤包住\n-                $productCategoriesInfo = implode('<br>', $categoryNames);\n+                $categoryNames = array_map(function($name) {\n+                    return '<span class=\"badge badge-primary\">' . $name . '</span>';\n+                }, $categoryNames);\n+                // 將類別名稱轉換為 HTML 字串\n+                // $productCategoriesInfo = implode('<br>', $categoryNames);\n             }\n \n             // 配管與膠塊處理\n             $pipingHtml = '';\n@@ -628,630 +632,4 @@\n             'productCategories' => $productCategories\n         ]);\n     }\n }\n-<?php\n-\n-namespace App\\Http\\Controllers\\Admin;\n-\n-use App\\Http\\Requests\\Admin\\CreateProductsInfoRequest;\n-use App\\Http\\Requests\\Admin\\UpdateProductsInfoRequest;\n-use App\\Http\\Controllers\\AppBaseController;\n-use App\\Repositories\\Admin\\ProductsInfoRepository;\n-use Illuminate\\Http\\Request;\n-use App\\Models\\Admin\\ProductImage;\n-use App\\Models\\Admin\\ProductsInfo;\n-use Flash;\n-use Illuminate\\Support\\Facades\\Storage;\n-// 加入這行來引入 Form 類別\n-use Collective\\Html\\FormFacade as Form;\n-use Intervention\\Image\\Facades\\Image;\n-use Illuminate\\Support\\Facades\\File;\n-use Illuminate\\Support\\Str;\n-\n-class ProductsInfoController extends AppBaseController\n-{\n-    /** @var ProductsInfoRepository $productsInfoRepository*/\n-    private $productsInfoRepository;\n-\n-    // 設定每個產品的最大圖片數量\n-    private const MAX_IMAGES_PER_PRODUCT = 10;\n-\n-    public function __construct(ProductsInfoRepository $productsInfoRepo)\n-    {\n-        $this->productsInfoRepository = $productsInfoRepo;\n-    }\n-\n-    public function getDataTableData(Request $request)\n-    {\n-        try {\n-        // $productsInfos = $this->productsInfoRepository->all()\n-        //     ->load([\n-        //         'translations',\n-        //         'applicationCategory',  // 需添加此關聯到 ProductsInfo 模型\n-        //         'brand',                // 需添加此關聯到 ProductsInfo 模型\n-        //         'productCategory'       // 需添加此關聯到 ProductsInfo 模型\n-        //     ]);\n-        // $draw = $request->get('draw');\n-        // $start = $request->get('start', 0);\n-        // // 最關鍵的修改：確保 length 永遠有值\n-        // $length = $request->get('length', 10);\n-\n-        // // 如果 length 為 -1，表示要取得所有資料\n-        // if ($length == -1) {\n-        //     $length = 1000; // 設置一個較大的數值，避免無限制查詢\n-        // }\n-        $search = $request->get('search')['value'] ?? '';\n-\n-        $query = ProductsInfo::with(['translations', 'applicationCategory', 'brand', 'productCategories']);\n-\n-        // 加入搜尋條件\n-        if (!empty($search)) {\n-            $query->whereHas('translations', function($q) use ($search) {\n-                $q->where('name', 'like', \"%{$search}%\");\n-\n-            });\n-        }\n-\n-        // $recordsTotal = $query->count();\n-        // $recordsFiltered = $recordsTotal;\n-\n-        // 只取得需要的分頁資料\n-        // $products = $query->skip($start)->take($length)->get();\n-        $products = $query->get();\n-\n-        $data = [];\n-        foreach ($products as $product) {\n-            // 產品封面圖片,Html\n-            $coverImage = $product->prod_img_cover;\n-            $coverImageHtml = '';\n-            if ($coverImage) {\n-                $coverImageHtml = '<img src=\"' . asset('uploads/' . $coverImage) . '\" class=\"img-fluid\" alt=\"產品封面圖片\">';\n-            } else {\n-                $coverImageHtml = '<p class=\"text-muted\">無封面圖片</p>';\n-            }\n-\n-\n-            // 產品名稱處理\n-            $nameHtml = '';\n-            $translationsCount = count($product->translations);\n-            foreach ($product->translations as $index => $translation) {\n-                $isLast = ($index === $translationsCount - 1);\n-                $langName = strtoupper($translation->locale) === 'ZH_TW' ? '中文' : 'English';\n-                $nameHtml .= '<div class=\"d-flex flex-lg-row flex-column justify-content-start align-items-start mb-1 pb-2 ' .\n-                            ($isLast ? 'border-bottom-0' : 'border-bottom') . '\">' .\n-                            '<span class=\"col-md-6 mr-2 font-weight-bold\">' . $langName . ':</span>' .\n-                            '<span class=\"col text-start text-wrap\">' . $translation->name . '</span></div>';\n-            }\n-\n-            // 應用類別名稱\n-            $applicationCategoriesInfo = $product->applicationCategory ? $product->applicationCategory->name : '無';\n-            if ($product->application_categories_info_id == 1) {\n-                $applicationCategoriesInfo .= ' - ' .\n-                    ($product->purchase_lease == 'purchase' ? '購買' :\n-                    ($product->purchase_lease == 'lease' ? '租賃' : '無'));\n-            }\n-\n-            // 品牌名稱\n-            $brands = $product->brand ? $product->brand->name : '無';\n-\n-            // 產品類別名稱\n-            $productCategoriesInfo = $product->productCategory ? $product->productCategory->name : '無';\n-\n-            // 配管與膠塊處理\n-            $pipingHtml = '';\n-            $glueBlockHtml = '';\n-            $translationsCount = count($product->translations);\n-            foreach ($product->translations as $index => $translation) {\n-                $isLast = ($index === $translationsCount - 1);\n-                $langName = strtoupper($translation->locale) === 'ZH_TW' ? '中文' : 'English';\n-\n-                $pipingHtml .= '<div class=\"d-flex flex-lg-row flex-column justify-content-start align-items-start mb-1 pb-2 ' .\n-                            ($isLast ? 'border-bottom-0' : 'border-bottom') . '\">' .\n-                            '<span class=\"col-md-6 mr-2 font-weight-bold\">' . $langName . ':</span>' .\n-                            '<span class=\"col text-start text-wrap\">' . $translation->piping . '</span></div>';\n-\n-                $glueBlockHtml .= '<div class=\"d-flex flex-lg-row flex-column justify-content-start align-items-start mb-1 pb-2 ' .\n-                            ($isLast ? 'border-bottom-0' : 'border-bottom') . '\">' .\n-                            '<span class=\"col-md-6 mr-2 font-weight-bold\">' . $langName . ':</span>' .\n-                            '<span class=\"col text-start text-wrap\">' . $translation->glue_block . '</span></div>';\n-            }\n-\n-            // 操作按鈕\n-            $actions = Form::open(['route' => ['admin.productsInfos.destroy', $product->id], 'method' => 'delete']) .\n-                    '<div class=\"btn-group\">' .\n-                    '<a href=\"' . localized_route('admin.productsInfos.edit', [$product->id]) . '\"' .\n-                    'class=\"btn btn-default btn-md\"><i class=\"far fa-edit\"></i></a>' .\n-                    Form::button('<i class=\"far fa-trash-alt\"></i>', ['type' => 'button', 'class' => 'btn btn-danger btn-md', 'onclick' => \"return check(this)\"]) .\n-                    '</div>' .\n-                    Form::close();\n-            // $actions = '<form action=\"' . route('admin.productsInfos.destroy', $product->id) . '\" method=\"POST\">' .\n-            // csrf_field() .\n-            // method_field('DELETE') .\n-            // '<div class=\"btn-group\">' .\n-            // '<a href=\"' . route('admin.productsInfos.edit', [$product->id]) . '\" ' .\n-            // 'class=\"btn btn-default btn-md\"><i class=\"far fa-edit\"></i></a>' .\n-            // '<button type=\"submit\" class=\"btn btn-danger btn-md\" onclick=\"return confirm(\\'確定要刪除此產品嗎?\\')\"><i class=\"far fa-trash-alt\"></i></button>' .\n-            // '</div>' .\n-            // '</form>';\n-\n-            $data[] = [\n-                'id' => $product->id,\n-                'prod_img_cover' => $coverImageHtml,\n-                'name' => $nameHtml,\n-                'application_category' => $applicationCategoriesInfo,\n-                'brand' => $brands,\n-                'product_category' => $productCategoriesInfo,\n-                'version' => $product->version,\n-                'quick_bucket_changer' => $product->quick_bucket_changer ?\n-                    '<i class=\"fas fa-check text-success\"></i>' : '<i class=\"fas fa-times text-danger\"></i>',\n-                'operating_converter' => $product->operating_converter ?\n-                    '<i class=\"fas fa-check text-success\"></i>' : '<i class=\"fas fa-times text-danger\"></i>',\n-                'piping' => $pipingHtml,\n-                'glue_block' => $glueBlockHtml,\n-                'actions' => $actions\n-            ];\n-        }\n-\n-        return response()->json(['data' => $data]);\n-        // return response()->json([\n-        //     'draw' => intval($draw),\n-        //     'recordsTotal' => intval($recordsTotal),\n-        //     'recordsFiltered' => intval($recordsFiltered),\n-        //     'data' => $data\n-        // ]);\n-\n-        } catch (\\Exception $e) {\n-        \\Log::error('DataTable error: ' . $e->getMessage() . ' at ' . $e->getFile() . ':' . $e->getLine());\n-        return response()->json(['error' => $e->getMessage()], 500);\n-    }\n-    }\n-\n-    /**\n-     * Display a listing of the ProductsInfo.\n-     */\n-    public function index(Request $request)\n-    {\n-        // $productsInfos = $this->productsInfoRepository->all();\n-        $productsInfos = collect([]);\n-\n-        return view('admin.products_infos.index')\n-            ->with('productsInfos', $productsInfos);\n-    }\n-\n-    /**\n-     * Show the form for creating a new ProductsInfo.\n-     */\n-    public function create()\n-    {\n-        // 取得系統支援的語系\n-        $locales = config('translatable.locales');\n-        // 取得應用類別資訊列表\n-        $applicationCategoriesInfos = \\App\\Models\\Admin\\ApplicationCategoriesInfo::pluck('name', 'id')->toArray();\n-        // 將應用類別資訊轉換為選擇列表格式\n-        $applicationCategoriesInfos = ['' => '請選擇'] + $applicationCategoriesInfos;\n-\n-        return view('admin.products_infos.create', compact('locales', 'applicationCategoriesInfos'));\n-    }\n-\n-    /**\n-     * Store a newly created ProductsInfo in storage.\n-     */\n-    public function store(CreateProductsInfoRequest $request)\n-    {\n-        $input = $request->all();\n-\n-        // 自動生成 slug (如果沒有提供)\n-        // if (empty($input['slug']) && isset($input[config('translatable.fallback_locale')]['name'])) {\n-        //     $input['slug'] = \\Illuminate\\Support\\Str::slug($input[config('translatable.fallback_locale')]['name']);\n-        // }\n-\n-        // 處理圖片上傳\n-        $input['prod_img_cover'] = $this->processImage($request->file('prod_img_cover'), 'product_cover_image');\n-\n-        // 處理檔案上傳\n-        $input['pdf'] = $this->handleFileUpload($request->file('pdf'), '', 'catalog_files');\n-        // 如果沒有上傳檔案，則設置為空字串\n-        if (!$input['pdf']) {\n-            $input['pdf'] = '';\n-        }\n-\n-        // 處理多語系資料\n-        $translationData = [];\n-        $locales = config('translatable.locales');\n-\n-        foreach ($locales as $locale) {\n-            if (isset($input[$locale])) {\n-                $translationData[$locale] = $input[$locale];\n-                unset($input[$locale]); // 移除以免影響主表資料\n-            }\n-        }\n-\n-        $prod_categories_id = $input['product_categories_id'] ?? [];\n-        unset($input['product_categories_id']); // 移除以免影響主表資料\n-\n-        $productsInfo = $this->productsInfoRepository->create($input);\n-\n-        // 處理產品類別關聯\n-        if (!empty($prod_categories_id)) {\n-            $productsInfo->productCategories()->sync($prod_categories_id);\n-        }\n-\n-        // 處理多語系翻譯\n-        foreach ($translationData as $locale => $data) {\n-            $productsInfo->translateOrNew($locale)->fill($data);\n-        }\n-        $productsInfo->save();\n-\n-        // 處理產品圖片上傳\n-        if ($request->hasFile('product_images')) {\n-            // 檢查圖片數量\n-            $uploadCount = count($request->file('product_images'));\n-\n-            // 如果超過最大數量，顯示錯誤\n-            if ($uploadCount > self::MAX_IMAGES_PER_PRODUCT) {\n-                Flash::error('每個產品最多只能有 '.self::MAX_IMAGES_PER_PRODUCT.' 張圖片');\n-                return redirect()->back()->withInput();\n-            }\n-\n-            $this->saveProductImages($productsInfo, $request);\n-        }\n-\n-        Flash::success('產品建立成功');\n-\n-        return redirect(route('admin.productsInfos.index'));\n-    }\n-\n-    /**\n-     * Display the specified ProductsInfo.\n-     */\n-    public function show($id)\n-    {\n-        $productsInfo = $this->productsInfoRepository->find($id);\n-\n-        if (empty($productsInfo)) {\n-            Flash::error('找不到產品資訊');\n-\n-            return redirect(route('admin.productsInfos.index'));\n-        }\n-\n-        return view('admin.products_infos.show')->with('productsInfo', $productsInfo);\n-    }\n-\n-    /**\n-     * Show the form for editing the specified ProductsInfo.\n-     */\n-    public function edit($id)\n-    {\n-        $productsInfo = $this->productsInfoRepository->find($id);\n-\n-        // 確保載入產品類別關聯\n-        $productsInfo->load('productCategories');\n-\n-\n-        if (empty($productsInfo)) {\n-            Flash::error('找不到產品資訊');\n-\n-            return redirect(route('admin.productsInfos.index'));\n-        }\n-\n-        // 取得系統支援的語系\n-        $locales = config('translatable.locales');\n-        // 取得應用類別資訊列表\n-        $applicationCategoriesInfos = \\App\\Models\\Admin\\ApplicationCategoriesInfo::pluck('name', 'id')->toArray();\n-        // 將應用類別資訊轉換為選擇列表格式\n-        $applicationCategoriesInfos = ['' => '請選擇'] + $applicationCategoriesInfos;\n-\n-        // 傳遞資料到編輯視圖\n-        return view('admin.products_infos.edit', compact('productsInfo', 'locales', 'applicationCategoriesInfos'));\n-\n-    }\n-\n-    /**\n-     * Update the specified ProductsInfo in storage.\n-     */\n-    public function update($id, UpdateProductsInfoRequest $request)\n-    {\n-        $productsInfo = $this->productsInfoRepository->find($id);\n-\n-        if (empty($productsInfo)) {\n-            Flash::error('Products Info not found');\n-\n-            return redirect(route('admin.productsInfos.index'));\n-        }\n-\n-        $input = $request->all();\n-\n-        // 自動生成 slug (如果沒有提供)\n-        // if (empty($input['slug']) && isset($input[config('translatable.fallback_locale')]['name'])) {\n-        //     $input['slug'] = \\Illuminate\\Support\\Str::slug($input[config('translatable.fallback_locale')]['name']);\n-        // }\n-\n-        // 處理圖片上傳\n-       $input['prod_img_cover'] = $this->handleImageUpload($request->file('prod_img_cover'), $productsInfo->prod_img_cover, 'product_cover_image');\n-\n-        // 處理檔案上傳\n-        if ($request->hasFile('pdf')) {\n-            $input['pdf'] = $this->handleFileUpload($request->file('pdf'), $productsInfo->pdf, 'catalog_files');\n-        } else {\n-            // 如果沒有上傳檔案，則保留原有的 PDF 路徑\n-            $input['pdf'] = $productsInfo->pdf;\n-        }\n-\n-        // 處理多語系資料\n-        $translationData = [];\n-        $locales = config('translatable.locales');\n-        foreach ($locales as $locale) {\n-            if (isset($input[$locale])) {\n-                $translationData[$locale] = $input[$locale];\n-                unset($input[$locale]); // 移除以免影響主表資料\n-            }\n-        }\n-\n-        $prod_categories_id = $input['product_categories_id'] ?? [];\n-        unset($input['product_categories_id']); // 移除以免影響主表資料\n-\n-        $productsInfo = $this->productsInfoRepository->update($input, $id);\n-\n-        // 處理產品類別關聯\n-        if (!empty($prod_categories_id)) {\n-            $productsInfo->productCategories()->sync($prod_categories_id);\n-        } else {\n-            // 如果沒有提供產品類別，則清除所有關聯\n-            $productsInfo->productCategories()->detach();\n-        }\n-\n-        // 處理多語系翻譯\n-        foreach ($translationData as $locale => $data) {\n-            $productsInfo->translateOrNew($locale)->fill($data);\n-        }\n-        $productsInfo->save();\n-\n-        // 計算更新後的圖片數量\n-        $existingImageCount = $productsInfo->images->count();\n-        $deleteCount = $request->has('delete_images') ? count($request->delete_images) : 0;\n-        $uploadCount = $request->hasFile('product_images') ? count($request->file('product_images')) : 0;\n-\n-        // 計算最終圖片數量\n-        $finalImageCount = $existingImageCount - $deleteCount + $uploadCount;\n-\n-        // 檢查是否超過限制\n-        if ($finalImageCount > self::MAX_IMAGES_PER_PRODUCT) {\n-            Flash::error('每個產品最多只能有 '.self::MAX_IMAGES_PER_PRODUCT.' 張圖片');\n-            return redirect()->back()->withInput();\n-        }\n-\n-        // 處理圖片刪除\n-        if ($request->has('delete_images')) {\n-            $this->deleteProductImages($request->delete_images);\n-        }\n-\n-        // 處理圖片排序\n-        if ($request->has('sort_orders')) {\n-            $this->updateImageSortOrders($request->sort_orders);\n-        }\n-\n-        // 處理新上傳的圖片\n-        if ($request->hasFile('product_images')) {\n-            $this->saveProductImages($productsInfo, $request);\n-        }\n-\n-        Flash::success('產品更新成功');\n-\n-        return redirect(route('admin.productsInfos.index'));\n-    }\n-\n-    /**\n-     * Remove the specified ProductsInfo from storage.\n-     *\n-     * @throws \\Exception\n-     */\n-    public function destroy($id)\n-    {\n-        $productsInfo = $this->productsInfoRepository->find($id);\n-\n-        if (empty($productsInfo)) {\n-            Flash::error('Products Info not found');\n-\n-            return redirect(route('admin.productsInfos.index'));\n-        }\n-\n-        // 刪除產品關聯的所有圖片\n-        foreach ($productsInfo->images as $image) {\n-            Storage::disk('public')->delete($image->image_path);\n-            $image->delete();\n-        }\n-\n-        $this->productsInfoRepository->delete($id);\n-\n-        Flash::success('產品刪除成功');\n-\n-        return redirect(route('admin.productsInfos.index'));\n-    }\n-\n-    /**\n-     * 儲存產品圖片\n-     */\n-    private function saveProductImages($product, $request)\n-    {\n-        $files = $request->file('product_images');\n-        $newSortOrders = $request->new_sort_orders ?? [];\n-        $maxSortOrder = ProductImage::where('product_id', $product->id)->max('sort_order') ?? 0;\n-\n-        foreach ($files as $key => $file) {\n-            // 存儲圖片到儲存空間\n-            $path = $file->store('product_images', 'public');\n-\n-            // 儲存圖片記錄到資料庫\n-            $sortOrder = isset($newSortOrders[$key]) ? $newSortOrders[$key] : $maxSortOrder + 1;\n-            $maxSortOrder = max($maxSortOrder, $sortOrder);\n-\n-            ProductImage::create([\n-                'product_id' => $product->id,\n-                'image_path' => $path,\n-                'sort_order' => $sortOrder\n-            ]);\n-        }\n-    }\n-\n-    /**\n-     * 刪除產品圖片\n-     */\n-    private function deleteProductImages($imageIds)\n-    {\n-        foreach ($imageIds as $imageId) {\n-            $image = ProductImage::find($imageId);\n-\n-            if ($image) {\n-                // 刪除實際圖片檔案\n-                Storage::disk('public')->delete($image->image_path);\n-\n-                // 刪除資料庫記錄\n-                $image->delete();\n-            }\n-        }\n-    }\n-\n-    /**\n-     * 更新圖片排序（根據拖曳排序的結果）\n-     */\n-    private function updateImageSortOrders($sortOrders)\n-    {\n-        foreach ($sortOrders as $imageId => $sortOrder) {\n-            ProductImage::where('id', $imageId)\n-                ->update(['sort_order' => $sortOrder]);\n-        }\n-    }\n-\n-    // 共用檔案處理函式\n-    function handleFileUpload($newFile, $existingFilePath, $uploadDir)\n-    {\n-        if ($newFile) {\n-            $path = public_path('uploads/files/' . $uploadDir . '/');\n-            $filename = time() . '_' . $newFile->getClientOriginalName();\n-\n-            // 確保目錄存在\n-            if (!file_exists($path)) {\n-                mkdir($path, 0755, true);\n-            }\n-\n-            // 若已有檔案，刪除舊檔案\n-            if (!empty($existingFilePath) && File::exists(public_path('uploads/' . $existingFilePath))) {\n-                File::delete(public_path('uploads/' . $existingFilePath));\n-            }\n-\n-            // 儲存新檔案\n-            $newFile->move($path, $filename);\n-\n-            return 'files/' . $uploadDir . '/' . $filename;\n-        }\n-\n-        // 若無新檔案，返回舊檔案路徑\n-        return $existingFilePath;\n-    }\n-\n-    // 共用的圖片處理函式\n-    function processImage($image, $uploadDir, $resizeWidth = 800, $quality = 75)\n-    {\n-        if ($image) {\n-            $path = public_path('uploads/images/' . $uploadDir) . '/';\n-            $filename = time() . '_' . $image->getClientOriginalName();\n-\n-            if (!file_exists($path)) {\n-                mkdir($path, 0755, true);\n-            }\n-\n-            // 壓縮圖片\n-            $image = Image::make($image)\n-                ->orientate()\n-                // ->resize($resizeWidth, null, function ($constraint) {\n-                //     $constraint->aspectRatio();\n-                //     $constraint->upsize();\n-                // })\n-                ->encode('jpg', $quality); // 設定 JPG 格式和品質\n-            $image->save($path . $filename);\n-\n-            return 'images/' . $uploadDir . '/' . $filename;\n-        }\n-\n-        return '';\n-    }\n-\n-    // 共用圖片處理函式\n-    function handleImageUpload($newImage, $existingImagePath, $uploadDir, $resizeWidth = 800, $quality = 75)\n-    {\n-        if ($newImage) {\n-            $path = public_path('uploads/images/' . $uploadDir . '/');\n-            $filename = time() . '_' . $newImage->getClientOriginalName();\n-\n-            // 確保目錄存在\n-            if (!file_exists($path)) {\n-                mkdir($path, 0755, true);\n-            }\n-\n-            // 若已有圖片，刪除舊圖片\n-            if (!empty($existingImagePath) && File::exists(public_path('uploads/' . $existingImagePath))) {\n-                File::delete(public_path('uploads/' . $existingImagePath));\n-            }\n-\n-            // 壓縮並保存新圖片\n-            $image = Image::make($newImage)\n-                ->orientate()\n-                // ->resize($resizeWidth, null, function ($constraint) {\n-                //     $constraint->aspectRatio();\n-                //     $constraint->upsize();\n-                // })\n-                ->encode('jpg', $quality); // 設定 JPG 格式和品質\n-            $image->save($path . $filename);\n-\n-            return 'images/' . $uploadDir . '/' . $filename;\n-        }\n-\n-        // 若無新圖片，返回舊圖片路徑\n-        return $existingImagePath;\n-    }\n-\n-    /**\n-     * 根據應用類別獲取對應的產品品牌和產品類別\n-     */\n-    public function getCategoriesData(Request $request)\n-    {\n-        $applicationCategoryId = $request->input('application_category_id');\n-        // 取得語系\n-        $locale = app()->getLocale();\n-\n-        // 獲取對應的品牌列表，包含翻譯\n-        $brands = \\App\\Models\\Admin\\BrandsInfo::with(['translations' => function($query) use ($locale) {\n-                $query->where('locale', $locale);\n-            }])\n-            ->where('application_categories_info_id', $applicationCategoryId)\n-            ->get()\n-            ->map(function($brand) {\n-                return [\n-                    'id' => $brand->id,\n-                    'name' => $brand->translate()->name ?? $brand->id // 如果翻譯不存在則使用ID\n-                ];\n-            })\n-            ->pluck('name', 'id')\n-            ->toArray();\n-\n-        // 獲取對應的產品類別列表，包含翻譯\n-        $productCategories = \\App\\Models\\Admin\\ProductCategories::with(['translations' => function($query) use ($locale) {\n-                $query->where('locale', $locale);\n-            }])\n-            ->where('application_categories_info_id', $applicationCategoryId)\n-            ->get()\n-            ->map(function($category) {\n-                return [\n-                    'id' => $category->id,\n-                    'name' => $category->translate()->name ?? $category->id // 如果翻譯不存在則使用ID\n-                ];\n-            })\n-            ->pluck('name', 'id')\n-            ->toArray();\n-\n-        return response()->json([\n-            'brands' => $brands,\n-            'productCategories' => $productCategories\n-        ]);\n-    }\n-}\n"
                },
                {
                    "date": 1753268958251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,10 +110,9 @@\n                 // 使用 implode 來處理多個類別名稱，並用 <br> 分隔，span class=\"badge badge-primary\" 標籤包住\n                 $categoryNames = array_map(function($name) {\n                     return '<span class=\"badge badge-primary\">' . $name . '</span>';\n                 }, $categoryNames);\n-                // 將類別名稱轉換為 HTML 字串\n-                // $productCategoriesInfo = implode('<br>', $categoryNames);\n+                $productCategoriesInfo = implode('<br>', $categoryNames);\n             }\n \n             // 配管與膠塊處理\n             $pipingHtml = '';\n"
                },
                {
                    "date": 1753269024047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,11 +106,11 @@\n             // 產品類別名稱\n             $productCategoriesInfo = '無';\n             if ($product->productCategories && $product->productCategories->count() > 0) {\n                 $categoryNames = $product->productCategories->pluck('name')->toArray();\n-                // 使用 implode 來處理多個類別名稱，並用 <br> 分隔，span class=\"badge badge-primary\" 標籤包住\n+                // 使用 implode 來處理多個類別名稱，並用 <br> 分隔，span class=\"badge badge-info\" 標籤包住\n                 $categoryNames = array_map(function($name) {\n-                    return '<span class=\"badge badge-primary\">' . $name . '</span>';\n+                    return '<span class=\"badge badge-info\">' . $name . '</span>';\n                 }, $categoryNames);\n                 $productCategoriesInfo = implode('<br>', $categoryNames);\n             }\n \n"
                }
            ],
            "date": 1753263954777,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Requests\\Admin\\CreateProductsInfoRequest;\nuse App\\Http\\Requests\\Admin\\UpdateProductsInfoRequest;\nuse App\\Http\\Controllers\\AppBaseController;\nuse App\\Repositories\\Admin\\ProductsInfoRepository;\nuse Illuminate\\Http\\Request;\nuse App\\Models\\Admin\\ProductImage;\nuse App\\Models\\Admin\\ProductsInfo;\nuse Flash;\nuse Illuminate\\Support\\Facades\\Storage;\n// 加入這行來引入 Form 類別\nuse Collective\\Html\\FormFacade as Form;\nuse Intervention\\Image\\Facades\\Image;\nuse Illuminate\\Support\\Facades\\File;\nuse Illuminate\\Support\\Str;\n\nclass ProductsInfoController extends AppBaseController\n{\n    /** @var ProductsInfoRepository $productsInfoRepository*/\n    private $productsInfoRepository;\n\n    // 設定每個產品的最大圖片數量\n    private const MAX_IMAGES_PER_PRODUCT = 10;\n\n    public function __construct(ProductsInfoRepository $productsInfoRepo)\n    {\n        $this->productsInfoRepository = $productsInfoRepo;\n    }\n\n    public function getDataTableData(Request $request)\n    {\n        try {\n        // $productsInfos = $this->productsInfoRepository->all()\n        //     ->load([\n        //         'translations',\n        //         'applicationCategory',  // 需添加此關聯到 ProductsInfo 模型\n        //         'brand',                // 需添加此關聯到 ProductsInfo 模型\n        //         'productCategory'       // 需添加此關聯到 ProductsInfo 模型\n        //     ]);\n        // $draw = $request->get('draw');\n        // $start = $request->get('start', 0);\n        // // 最關鍵的修改：確保 length 永遠有值\n        // $length = $request->get('length', 10);\n\n        // // 如果 length 為 -1，表示要取得所有資料\n        // if ($length == -1) {\n        //     $length = 1000; // 設置一個較大的數值，避免無限制查詢\n        // }\n        $search = $request->get('search')['value'] ?? '';\n\n        $query = ProductsInfo::with(['translations', 'applicationCategory', 'brand', 'productCategory']);\n\n        // 加入搜尋條件\n        if (!empty($search)) {\n            $query->whereHas('translations', function($q) use ($search) {\n                $q->where('name', 'like', \"%{$search}%\");\n\n            });\n        }\n\n        // $recordsTotal = $query->count();\n        // $recordsFiltered = $recordsTotal;\n\n        // 只取得需要的分頁資料\n        // $products = $query->skip($start)->take($length)->get();\n        $products = $query->get();\n\n        $data = [];\n        foreach ($products as $product) {\n            // 產品封面圖片,Html\n            $coverImage = $product->prod_img_cover;\n            $coverImageHtml = '';\n            if ($coverImage) {\n                $coverImageHtml = '<img src=\"' . asset('uploads/' . $coverImage) . '\" class=\"img-fluid\" alt=\"產品封面圖片\">';\n            } else {\n                $coverImageHtml = '<p class=\"text-muted\">無封面圖片</p>';\n            }\n\n\n            // 產品名稱處理\n            $nameHtml = '';\n            $translationsCount = count($product->translations);\n            foreach ($product->translations as $index => $translation) {\n                $isLast = ($index === $translationsCount - 1);\n                $langName = strtoupper($translation->locale) === 'ZH_TW' ? '中文' : 'English';\n                $nameHtml .= '<div class=\"d-flex flex-lg-row flex-column justify-content-start align-items-start mb-1 pb-2 ' .\n                            ($isLast ? 'border-bottom-0' : 'border-bottom') . '\">' .\n                            '<span class=\"col-md-6 mr-2 font-weight-bold\">' . $langName . ':</span>' .\n                            '<span class=\"col text-start text-wrap\">' . $translation->name . '</span></div>';\n            }\n\n            // 應用類別名稱\n            $applicationCategoriesInfo = $product->applicationCategory ? $product->applicationCategory->name : '無';\n            if ($product->application_categories_info_id == 1) {\n                $applicationCategoriesInfo .= ' - ' .\n                    ($product->purchase_lease == 'purchase' ? '購買' :\n                    ($product->purchase_lease == 'lease' ? '租賃' : '無'));\n            }\n\n            // 品牌名稱\n            $brands = $product->brand ? $product->brand->name : '無';\n\n            // 產品類別名稱\n            $productCategoriesInfo = $product->productCategory ? $product->productCategory->name : '無';\n\n            // 配管與膠塊處理\n            $pipingHtml = '';\n            $glueBlockHtml = '';\n            $translationsCount = count($product->translations);\n            foreach ($product->translations as $index => $translation) {\n                $isLast = ($index === $translationsCount - 1);\n                $langName = strtoupper($translation->locale) === 'ZH_TW' ? '中文' : 'English';\n\n                $pipingHtml .= '<div class=\"d-flex flex-lg-row flex-column justify-content-start align-items-start mb-1 pb-2 ' .\n                            ($isLast ? 'border-bottom-0' : 'border-bottom') . '\">' .\n                            '<span class=\"col-md-6 mr-2 font-weight-bold\">' . $langName . ':</span>' .\n                            '<span class=\"col text-start text-wrap\">' . $translation->piping . '</span></div>';\n\n                $glueBlockHtml .= '<div class=\"d-flex flex-lg-row flex-column justify-content-start align-items-start mb-1 pb-2 ' .\n                            ($isLast ? 'border-bottom-0' : 'border-bottom') . '\">' .\n                            '<span class=\"col-md-6 mr-2 font-weight-bold\">' . $langName . ':</span>' .\n                            '<span class=\"col text-start text-wrap\">' . $translation->glue_block . '</span></div>';\n            }\n\n            // 操作按鈕\n            $actions = Form::open(['route' => ['admin.productsInfos.destroy', $product->id], 'method' => 'delete']) .\n                    '<div class=\"btn-group\">' .\n                    '<a href=\"' . localized_route('admin.productsInfos.edit', [$product->id]) . '\"' .\n                    'class=\"btn btn-default btn-md\"><i class=\"far fa-edit\"></i></a>' .\n                    Form::button('<i class=\"far fa-trash-alt\"></i>', ['type' => 'button', 'class' => 'btn btn-danger btn-md', 'onclick' => \"return check(this)\"]) .\n                    '</div>' .\n                    Form::close();\n            // $actions = '<form action=\"' . route('admin.productsInfos.destroy', $product->id) . '\" method=\"POST\">' .\n            // csrf_field() .\n            // method_field('DELETE') .\n            // '<div class=\"btn-group\">' .\n            // '<a href=\"' . route('admin.productsInfos.edit', [$product->id]) . '\" ' .\n            // 'class=\"btn btn-default btn-md\"><i class=\"far fa-edit\"></i></a>' .\n            // '<button type=\"submit\" class=\"btn btn-danger btn-md\" onclick=\"return confirm(\\'確定要刪除此產品嗎?\\')\"><i class=\"far fa-trash-alt\"></i></button>' .\n            // '</div>' .\n            // '</form>';\n\n            $data[] = [\n                'id' => $product->id,\n                'prod_img_cover' => $coverImageHtml,\n                'name' => $nameHtml,\n                'application_category' => $applicationCategoriesInfo,\n                'brand' => $brands,\n                'product_category' => $productCategoriesInfo,\n                'version' => $product->version,\n                'quick_bucket_changer' => $product->quick_bucket_changer ?\n                    '<i class=\"fas fa-check text-success\"></i>' : '<i class=\"fas fa-times text-danger\"></i>',\n                'operating_converter' => $product->operating_converter ?\n                    '<i class=\"fas fa-check text-success\"></i>' : '<i class=\"fas fa-times text-danger\"></i>',\n                'piping' => $pipingHtml,\n                'glue_block' => $glueBlockHtml,\n                'actions' => $actions\n            ];\n        }\n\n        return response()->json(['data' => $data]);\n        // return response()->json([\n        //     'draw' => intval($draw),\n        //     'recordsTotal' => intval($recordsTotal),\n        //     'recordsFiltered' => intval($recordsFiltered),\n        //     'data' => $data\n        // ]);\n\n        } catch (\\Exception $e) {\n        \\Log::error('DataTable error: ' . $e->getMessage() . ' at ' . $e->getFile() . ':' . $e->getLine());\n        return response()->json(['error' => $e->getMessage()], 500);\n    }\n    }\n\n    /**\n     * Display a listing of the ProductsInfo.\n     */\n    public function index(Request $request)\n    {\n        // $productsInfos = $this->productsInfoRepository->all();\n        $productsInfos = collect([]);\n\n        return view('admin.products_infos.index')\n            ->with('productsInfos', $productsInfos);\n    }\n\n    /**\n     * Show the form for creating a new ProductsInfo.\n     */\n    public function create()\n    {\n        // 取得系統支援的語系\n        $locales = config('translatable.locales');\n        // 取得應用類別資訊列表\n        $applicationCategoriesInfos = \\App\\Models\\Admin\\ApplicationCategoriesInfo::pluck('name', 'id')->toArray();\n        // 將應用類別資訊轉換為選擇列表格式\n        $applicationCategoriesInfos = ['' => '請選擇'] + $applicationCategoriesInfos;\n\n        return view('admin.products_infos.create', compact('locales', 'applicationCategoriesInfos'));\n    }\n\n    /**\n     * Store a newly created ProductsInfo in storage.\n     */\n    public function store(CreateProductsInfoRequest $request)\n    {\n        $input = $request->all();\n\n        // 自動生成 slug (如果沒有提供)\n        // if (empty($input['slug']) && isset($input[config('translatable.fallback_locale')]['name'])) {\n        //     $input['slug'] = \\Illuminate\\Support\\Str::slug($input[config('translatable.fallback_locale')]['name']);\n        // }\n\n        // 處理圖片上傳\n        $input['prod_img_cover'] = $this->processImage($request->file('prod_img_cover'), 'product_cover_image');\n\n        // 處理檔案上傳\n        $input['pdf'] = $this->handleFileUpload($request->file('pdf'), '', 'catalog_files');\n        // 如果沒有上傳檔案，則設置為空字串\n        if (!$input['pdf']) {\n            $input['pdf'] = '';\n        }\n\n        // 處理多語系資料\n        $translationData = [];\n        $locales = config('translatable.locales');\n\n        foreach ($locales as $locale) {\n            if (isset($input[$locale])) {\n                $translationData[$locale] = $input[$locale];\n                unset($input[$locale]); // 移除以免影響主表資料\n            }\n        }\n\n        $prod_categories_id = $input['product_categories_id'] ?? [];\n        unset($input['product_categories_id']); // 移除以免影響主表資料\n\n        $productsInfo = $this->productsInfoRepository->create($input);\n\n        // 處理產品類別關聯\n        if (!empty($prod_categories_id)) {\n            $productsInfo->productCategories()->sync($prod_categories_id);\n        }\n\n        // 處理多語系翻譯\n        foreach ($translationData as $locale => $data) {\n            $productsInfo->translateOrNew($locale)->fill($data);\n        }\n        $productsInfo->save();\n\n        // 處理產品圖片上傳\n        if ($request->hasFile('product_images')) {\n            // 檢查圖片數量\n            $uploadCount = count($request->file('product_images'));\n\n            // 如果超過最大數量，顯示錯誤\n            if ($uploadCount > self::MAX_IMAGES_PER_PRODUCT) {\n                Flash::error('每個產品最多只能有 '.self::MAX_IMAGES_PER_PRODUCT.' 張圖片');\n                return redirect()->back()->withInput();\n            }\n\n            $this->saveProductImages($productsInfo, $request);\n        }\n\n        Flash::success('產品建立成功');\n\n        return redirect(route('admin.productsInfos.index'));\n    }\n\n    /**\n     * Display the specified ProductsInfo.\n     */\n    public function show($id)\n    {\n        $productsInfo = $this->productsInfoRepository->find($id);\n\n        if (empty($productsInfo)) {\n            Flash::error('找不到產品資訊');\n\n            return redirect(route('admin.productsInfos.index'));\n        }\n\n        return view('admin.products_infos.show')->with('productsInfo', $productsInfo);\n    }\n\n    /**\n     * Show the form for editing the specified ProductsInfo.\n     */\n    public function edit($id)\n    {\n        $productsInfo = $this->productsInfoRepository->find($id);\n\n        if (empty($productsInfo)) {\n            Flash::error('找不到產品資訊');\n\n            return redirect(route('admin.productsInfos.index'));\n        }\n\n        // 取得系統支援的語系\n        $locales = config('translatable.locales');\n        // 取得應用類別資訊列表\n        $applicationCategoriesInfos = \\App\\Models\\Admin\\ApplicationCategoriesInfo::pluck('name', 'id')->toArray();\n        // 將應用類別資訊轉換為選擇列表格式\n        $applicationCategoriesInfos = ['' => '請選擇'] + $applicationCategoriesInfos;\n\n        // 傳遞資料到編輯視圖\n        return view('admin.products_infos.edit', compact('productsInfo', 'locales', 'applicationCategoriesInfos'));\n\n    }\n\n    /**\n     * Update the specified ProductsInfo in storage.\n     */\n    public function update($id, UpdateProductsInfoRequest $request)\n    {\n        $productsInfo = $this->productsInfoRepository->find($id);\n\n        if (empty($productsInfo)) {\n            Flash::error('Products Info not found');\n\n            return redirect(route('admin.productsInfos.index'));\n        }\n\n        $input = $request->all();\n\n        // 自動生成 slug (如果沒有提供)\n        // if (empty($input['slug']) && isset($input[config('translatable.fallback_locale')]['name'])) {\n        //     $input['slug'] = \\Illuminate\\Support\\Str::slug($input[config('translatable.fallback_locale')]['name']);\n        // }\n\n        // 處理圖片上傳\n       $input['prod_img_cover'] = $this->handleImageUpload($request->file('prod_img_cover'), $productsInfo->prod_img_cover, 'product_cover_image');\n\n        // 處理檔案上傳\n        if ($request->hasFile('pdf')) {\n            $input['pdf'] = $this->handleFileUpload($request->file('pdf'), $productsInfo->pdf, 'catalog_files');\n        } else {\n            // 如果沒有上傳檔案，則保留原有的 PDF 路徑\n            $input['pdf'] = $productsInfo->pdf;\n        }\n\n        // 處理多語系資料\n        $translationData = [];\n        $locales = config('translatable.locales');\n        foreach ($locales as $locale) {\n            if (isset($input[$locale])) {\n                $translationData[$locale] = $input[$locale];\n                unset($input[$locale]); // 移除以免影響主表資料\n            }\n        }\n\n        $prod_categories_id = $input['product_categories_id'] ?? [];\n        unset($input['product_categories_id']); // 移除以免影響主表資料\n\n        $productsInfo = $this->productsInfoRepository->update($input, $id);\n\n        // 處理產品類別關聯\n        if (!empty($prod_categories_id)) {\n            $productsInfo->productCategories()->sync($prod_categories_id);\n        }\n\n        // 處理多語系翻譯\n        foreach ($translationData as $locale => $data) {\n            $productsInfo->translateOrNew($locale)->fill($data);\n        }\n        $productsInfo->save();\n\n        // 計算更新後的圖片數量\n        $existingImageCount = $productsInfo->images->count();\n        $deleteCount = $request->has('delete_images') ? count($request->delete_images) : 0;\n        $uploadCount = $request->hasFile('product_images') ? count($request->file('product_images')) : 0;\n\n        // 計算最終圖片數量\n        $finalImageCount = $existingImageCount - $deleteCount + $uploadCount;\n\n        // 檢查是否超過限制\n        if ($finalImageCount > self::MAX_IMAGES_PER_PRODUCT) {\n            Flash::error('每個產品最多只能有 '.self::MAX_IMAGES_PER_PRODUCT.' 張圖片');\n            return redirect()->back()->withInput();\n        }\n\n        // 處理圖片刪除\n        if ($request->has('delete_images')) {\n            $this->deleteProductImages($request->delete_images);\n        }\n\n        // 處理圖片排序\n        if ($request->has('sort_orders')) {\n            $this->updateImageSortOrders($request->sort_orders);\n        }\n\n        // 處理新上傳的圖片\n        if ($request->hasFile('product_images')) {\n            $this->saveProductImages($productsInfo, $request);\n        }\n\n        Flash::success('產品更新成功');\n\n        return redirect(route('admin.productsInfos.index'));\n    }\n\n    /**\n     * Remove the specified ProductsInfo from storage.\n     *\n     * @throws \\Exception\n     */\n    public function destroy($id)\n    {\n        $productsInfo = $this->productsInfoRepository->find($id);\n\n        if (empty($productsInfo)) {\n            Flash::error('Products Info not found');\n\n            return redirect(route('admin.productsInfos.index'));\n        }\n\n        // 刪除產品關聯的所有圖片\n        foreach ($productsInfo->images as $image) {\n            Storage::disk('public')->delete($image->image_path);\n            $image->delete();\n        }\n\n        $this->productsInfoRepository->delete($id);\n\n        Flash::success('產品刪除成功');\n\n        return redirect(route('admin.productsInfos.index'));\n    }\n\n    /**\n     * 儲存產品圖片\n     */\n    private function saveProductImages($product, $request)\n    {\n        $files = $request->file('product_images');\n        $newSortOrders = $request->new_sort_orders ?? [];\n        $maxSortOrder = ProductImage::where('product_id', $product->id)->max('sort_order') ?? 0;\n\n        foreach ($files as $key => $file) {\n            // 存儲圖片到儲存空間\n            $path = $file->store('product_images', 'public');\n\n            // 儲存圖片記錄到資料庫\n            $sortOrder = isset($newSortOrders[$key]) ? $newSortOrders[$key] : $maxSortOrder + 1;\n            $maxSortOrder = max($maxSortOrder, $sortOrder);\n\n            ProductImage::create([\n                'product_id' => $product->id,\n                'image_path' => $path,\n                'sort_order' => $sortOrder\n            ]);\n        }\n    }\n\n    /**\n     * 刪除產品圖片\n     */\n    private function deleteProductImages($imageIds)\n    {\n        foreach ($imageIds as $imageId) {\n            $image = ProductImage::find($imageId);\n\n            if ($image) {\n                // 刪除實際圖片檔案\n                Storage::disk('public')->delete($image->image_path);\n\n                // 刪除資料庫記錄\n                $image->delete();\n            }\n        }\n    }\n\n    /**\n     * 更新圖片排序（根據拖曳排序的結果）\n     */\n    private function updateImageSortOrders($sortOrders)\n    {\n        foreach ($sortOrders as $imageId => $sortOrder) {\n            ProductImage::where('id', $imageId)\n                ->update(['sort_order' => $sortOrder]);\n        }\n    }\n\n    // 共用檔案處理函式\n    function handleFileUpload($newFile, $existingFilePath, $uploadDir)\n    {\n        if ($newFile) {\n            $path = public_path('uploads/files/' . $uploadDir . '/');\n            $filename = time() . '_' . $newFile->getClientOriginalName();\n\n            // 確保目錄存在\n            if (!file_exists($path)) {\n                mkdir($path, 0755, true);\n            }\n\n            // 若已有檔案，刪除舊檔案\n            if (!empty($existingFilePath) && File::exists(public_path('uploads/' . $existingFilePath))) {\n                File::delete(public_path('uploads/' . $existingFilePath));\n            }\n\n            // 儲存新檔案\n            $newFile->move($path, $filename);\n\n            return 'files/' . $uploadDir . '/' . $filename;\n        }\n\n        // 若無新檔案，返回舊檔案路徑\n        return $existingFilePath;\n    }\n\n    // 共用的圖片處理函式\n    function processImage($image, $uploadDir, $resizeWidth = 800, $quality = 75)\n    {\n        if ($image) {\n            $path = public_path('uploads/images/' . $uploadDir) . '/';\n            $filename = time() . '_' . $image->getClientOriginalName();\n\n            if (!file_exists($path)) {\n                mkdir($path, 0755, true);\n            }\n\n            // 壓縮圖片\n            $image = Image::make($image)\n                ->orientate()\n                // ->resize($resizeWidth, null, function ($constraint) {\n                //     $constraint->aspectRatio();\n                //     $constraint->upsize();\n                // })\n                ->encode('jpg', $quality); // 設定 JPG 格式和品質\n            $image->save($path . $filename);\n\n            return 'images/' . $uploadDir . '/' . $filename;\n        }\n\n        return '';\n    }\n\n    // 共用圖片處理函式\n    function handleImageUpload($newImage, $existingImagePath, $uploadDir, $resizeWidth = 800, $quality = 75)\n    {\n        if ($newImage) {\n            $path = public_path('uploads/images/' . $uploadDir . '/');\n            $filename = time() . '_' . $newImage->getClientOriginalName();\n\n            // 確保目錄存在\n            if (!file_exists($path)) {\n                mkdir($path, 0755, true);\n            }\n\n            // 若已有圖片，刪除舊圖片\n            if (!empty($existingImagePath) && File::exists(public_path('uploads/' . $existingImagePath))) {\n                File::delete(public_path('uploads/' . $existingImagePath));\n            }\n\n            // 壓縮並保存新圖片\n            $image = Image::make($newImage)\n                ->orientate()\n                // ->resize($resizeWidth, null, function ($constraint) {\n                //     $constraint->aspectRatio();\n                //     $constraint->upsize();\n                // })\n                ->encode('jpg', $quality); // 設定 JPG 格式和品質\n            $image->save($path . $filename);\n\n            return 'images/' . $uploadDir . '/' . $filename;\n        }\n\n        // 若無新圖片，返回舊圖片路徑\n        return $existingImagePath;\n    }\n\n    /**\n     * 根據應用類別獲取對應的產品品牌和產品類別\n     */\n    public function getCategoriesData(Request $request)\n    {\n        $applicationCategoryId = $request->input('application_category_id');\n        // 取得語系\n        $locale = app()->getLocale();\n\n        // 獲取對應的品牌列表，包含翻譯\n        $brands = \\App\\Models\\Admin\\BrandsInfo::with(['translations' => function($query) use ($locale) {\n                $query->where('locale', $locale);\n            }])\n            ->where('application_categories_info_id', $applicationCategoryId)\n            ->get()\n            ->map(function($brand) {\n                return [\n                    'id' => $brand->id,\n                    'name' => $brand->translate()->name ?? $brand->id // 如果翻譯不存在則使用ID\n                ];\n            })\n            ->pluck('name', 'id')\n            ->toArray();\n\n        // 獲取對應的產品類別列表，包含翻譯\n        $productCategories = \\App\\Models\\Admin\\ProductCategories::with(['translations' => function($query) use ($locale) {\n                $query->where('locale', $locale);\n            }])\n            ->where('application_categories_info_id', $applicationCategoryId)\n            ->get()\n            ->map(function($category) {\n                return [\n                    'id' => $category->id,\n                    'name' => $category->translate()->name ?? $category->id // 如果翻譯不存在則使用ID\n                ];\n            })\n            ->pluck('name', 'id')\n            ->toArray();\n\n        return response()->json([\n            'brands' => $brands,\n            'productCategories' => $productCategories\n        ]);\n    }\n}\n"
        }
    ]
}